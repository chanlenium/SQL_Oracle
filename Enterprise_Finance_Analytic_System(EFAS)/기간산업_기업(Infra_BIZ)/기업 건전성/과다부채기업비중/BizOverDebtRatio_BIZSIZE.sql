/*****************************************************
 * (StandBy) 부채비율 테이블 생성
 * 활용 테이블 : TCB_NICE_FNST(재무제표), GIUP_RAW(기업개요) -> DEBT_RATIO_TB 테이블 만듦
 *****************************************************/
-- 과거 데이터가 있으면 table 삭제하고 새로 생성
DROP TABLE IF EXISTS DEBT_RATIO_TB;
-- 테이블 생성 월별, 산업별, 기업규모별 부채비율 테이블 생성 (최근 4개년 데이터)
-- (기준년월, 법인번호, 기업규모, 외감여부, 상장여부, KSIC, 결산구분, 부채, 총자산, EFAS)
SELECT 
	t0.STD_YM,
	t0.CORP_NO,
	t0.COMP_SCL_DIVN_CD,
	t0.OSIDE_ISPT_YN,
	t0.BLIST_MRKT_DIVN_CD,
	t0.KSIC,
	t0.SEAC_DIVN,
	t0.DEBT,
	t0.CAPITAL,
	DECODE(t0.EFAS_4, NULL, 
		DECODE(t0.EFAS_3, NULL, 
			DECODE(t0.EFAS_2, NULL, NULL, t0.EFAS_2)
		, t0.EFAS_3)
	, t0.EFAS_4) as EFAS
	INTO DEBT_RATIO_TB
FROM(
	SELECT DISTINCT
		t1000.*,
		t2000.EFAS_CD as EFAS_2
	FROM(
		SELECT DISTINCT
			t100.*,
			t200.EFAS_CD as EFAS_3
		FROM(
			SELECT 
				t10.*, 
				t20.EFAS_CD as EFAS_4
			FROM 
				(
			    SELECT DISTINCT 
			    	SUBSTR(t1.STD_DT, 1, 6) as STD_YM, 
			    	t1.SEAC_DIVN,
			      	t2.CORP_NO, 
			      	t2.COMP_SCL_DIVN_CD, 
			      	t2.OSIDE_ISPT_YN,
			      	t2.BLIST_MRKT_DIVN_CD,
			      	t2.KSIC, 
			      	t1.DEBT, 
			      	t1.CAPITAL 
			    FROM 
			    	(
			        SELECT 
			          	t000.COMP_CD, 
			          	t000.SEAC_DIVN,
			          	t000.STD_DT, 
			          	t000.DEBT, 
			          	t000.CAPITAL 
			        FROM 
			          	(
			            SELECT 
			              	t00.STD_YM, 
			              	t00.COMP_CD, 
			              	t00.SEAC_DIVN,
			             	t00.STD_DT, 
			              	t00.DEBT, 
			              	t00.CAPITAL, 
			              	-- 동일 기준일자(STD_DT)에 등록된 재무 데이터가 있으면 기준년월(STD_YM)이 최근인 데이터 사용 
			              	ROW_NUMBER() OVER(PARTITION BY t00.COMP_CD, t00.STD_DT ORDER BY t00.STD_YM DESC) as LAST_STD_YM 
			            FROM 
			              	(
			                SELECT DISTINCT 
			                	t0.STD_YM, 
			                  	t0.COMP_CD, 
			                  	t0.SEAC_DIVN,
			                  	t0.STD_DT, 
			                  	SUM(t0.DEBT) OVER(PARTITION BY t0.STD_YM, t0.COMP_CD, t0.STD_DT) as DEBT, 
			                  	SUM(t0.CAPITAL) OVER(PARTITION BY t0.STD_YM, t0.COMP_CD, t0.STD_DT) as CAPITAL 
			                FROM 
			                  	(
			                    SELECT 
			                      	t.STD_YM, -- 데이터가 집중된 년월
			                      	t.COMP_CD, 
			                      	t.SEAC_DIVN,	-- 결산구분 (K: 결산, B: 반기, F: 1/4분기, T: 3/4분기)
			                      	t.STD_DT,	-- 재무데이터 기준일
			                      	t.ITEM_CD, 
			                      	DECODE(t.ITEM_CD, '8000', ROUND(t.AMT/1000, 0), 0) as DEBT, -- 부채
			                      	DECODE(t.ITEM_CD, '8900', ROUND(t.AMT/1000, 0), 0) as CAPITAL -- 자본
			                    FROM 
			                      	TCB_NICE_FNST t 
			                    WHERE 
			                      	t.REPORT_CD = '11' -- 대차대조표 
			                      	and t.ITEM_CD in ('8000', '8900')	-- 부채총계(8000), 자본총계(8900)
			                  	) t0 
			                WHERE 
			                	CAST(t0.STD_DT AS INTEGER)  IN (	-- 최근 4개년 자료 선택
			                		CAST(CONCAT( '${inputYYYY}', '1231') as INTEGER),
			                		CAST(CONCAT( '${inputYYYY}', '0930') as INTEGER),
			                		CAST(CONCAT( '${inputYYYY}', '0630') as INTEGER),
			                		CAST(CONCAT( '${inputYYYY}', '0331') as INTEGER),
			                		CAST(CONCAT( '${inputYYYY}', '1231') as INTEGER) - 10000,
			                		CAST(CONCAT( '${inputYYYY}', '0930') as INTEGER) - 10000,
			                		CAST(CONCAT( '${inputYYYY}', '0630') as INTEGER) - 10000,
			                		CAST(CONCAT( '${inputYYYY}', '0331') as INTEGER) - 10000,
			                		CAST(CONCAT( '${inputYYYY}', '1231') as INTEGER) - 20000,
			                		CAST(CONCAT( '${inputYYYY}', '0930') as INTEGER) - 20000,
			                		CAST(CONCAT( '${inputYYYY}', '0630') as INTEGER) - 20000,
			                		CAST(CONCAT( '${inputYYYY}', '0331') as INTEGER) - 20000,
			                		CAST(CONCAT( '${inputYYYY}', '1231') as INTEGER) - 30000,
			                		CAST(CONCAT( '${inputYYYY}', '0930') as INTEGER) - 30000,
			                		CAST(CONCAT( '${inputYYYY}', '0630') as INTEGER) - 30000,
			                		CAST(CONCAT( '${inputYYYY}', '0331') as INTEGER) - 30000)
			                ORDER BY 
			                  	t0.COMP_CD, t0.STD_DT
			              	) t00
			          	) t000 
			        WHERE 
			          	t000.LAST_STD_YM = '1'	-- 최근 데이터만 추출
			      	) t1 
			      	LEFT JOIN GIUP_RAW t2
			      		ON t1.COMP_CD = t2.COMP_CD
			      		AND t2.OSIDE_ISPT_YN = 'Y'	-- 외감 대상
			  	) t10
				LEFT JOIN EFASTOKSIC66 t20 
					ON SUBSTR(t10.KSIC, 1, 4) = t20.KSIC	-- KSIC 4자리로 매핑
			) t100
			LEFT JOIN EFASTOKSIC66 t200
				ON SUBSTR(t100.KSIC, 1, 3) = t200.KSIC	-- KSIC 3자리로 매핑
		)t1000
	  	LEFT JOIN EFASTOKSIC66 t2000
			ON SUBSTR(t1000.KSIC, 1, 2) = t2000.KSIC	-- KSIC 2자리로 매핑
	) t0
WHERE t0.KSIC is not NULL;		
-- 결과 조회
SELECT * FROM DEBT_RATIO_TB;





/****************************************************************
 * 건전성 지표 추이 - 과다부채(부채비율 200% 초과) 기업 비중 추이 (p.6, [그림3])
 * RFP p.15 [그림2] 부채비율
 * 활용 테이블 : DEBT_RATIO_TB에서 기업별 부채비율 계산하여 과다부채 기업 비중 계산
 ****************************************************************/
DROP TABLE IF EXISTS RESULT_BIZ_OVERDEBTRATIO_BIZSIZE;
SELECT DISTINCT
	t00.STD_YM,
	SUM(OVERDEBT_RATIO_BIZ_1) OVER(PARTITION BY t00.STD_YM) as OVERDEBT_RATIO_BIZ_1,
	SUM(OVERDEBT_RATIO_BIZ_2) OVER(PARTITION BY t00.STD_YM) as OVERDEBT_RATIO_BIZ_2,
	SUM(OVERDEBT_RATIO_BIZ_3) OVER(PARTITION BY t00.STD_YM) as OVERDEBT_RATIO_BIZ_3
	INTO RESULT_BIZ_OVERDEBTRATIO_BIZSIZE
FROM
	(	
	SELECT 
		t0.*,
		DECODE(t0.BIZ_SIZE, '대기업', t0.OVERDEBT_RATIO, 0) as OVERDEBT_RATIO_BIZ_1,
		DECODE(t0.BIZ_SIZE, '중소기업', t0.OVERDEBT_RATIO, 0) as OVERDEBT_RATIO_BIZ_2,
		DECODE(t0.BIZ_SIZE, '중견기업', t0.OVERDEBT_RATIO, 0) as OVERDEBT_RATIO_BIZ_3
	FROM
		(
		SELECT DISTINCT 
			CASE
		  		WHEN '${isSangJang}' = 'Y' THEN t0.STD_YM ELSE SUBSTR(t0.STD_YM, 1, 4)
		  	END as STD_YM,
		  	CASE 
		  		WHEN t0.COMP_SCL_DIVN_CD = 1 THEN '대기업'
		  		WHEN t0.COMP_SCL_DIVN_CD = 2 THEN '중소기업'
		  		WHEN t0.COMP_SCL_DIVN_CD = 3 THEN '중견기업'
		  		ELSE t0.COMP_SCL_DIVN_CD
		  	END as BIZ_SIZE, 
		  	CASE	-- 과다부채 기업 수
		  		WHEN '${isSangJang}' = 'Y' 
		  		THEN
		  			SUM(t0.isOVERDEBT) OVER(PARTITION BY t0.STD_YM, t0.COMP_SCL_DIVN_CD)
		  		ELSE
		  			SUM(t0.isOVERDEBT) OVER(PARTITION BY SUBSTR(t0.STD_YM, 1, 4), t0.COMP_SCL_DIVN_CD)
		  	END as OVERDEBTCNT,
		  	CASE	-- 전체 기업 수
		  		WHEN '${isSangJang}' = 'Y' 
		  		THEN
		  			COUNT(t0.CORP_NO) OVER(PARTITION BY t0.STD_YM, t0.COMP_SCL_DIVN_CD)
		  		ELSE
		  			COUNT(t0.CORP_NO) OVER(PARTITION BY SUBSTR(t0.STD_YM, 1, 4), t0.COMP_SCL_DIVN_CD)
		  	END as TOTBIZCNT,
			CASE	-- 과다부채기업 비중
		  		WHEN '${isSangJang}' = 'Y' 
		  		THEN
		  			ROUND(SUM(t0.isOVERDEBT) OVER(PARTITION BY t0.STD_YM, t0.COMP_SCL_DIVN_CD) / COUNT(t0.CORP_NO) OVER(PARTITION BY t0.STD_YM, t0.COMP_SCL_DIVN_CD), 4)
		  		ELSE
		  			ROUND(SUM(t0.isOVERDEBT) OVER(PARTITION BY SUBSTR(t0.STD_YM, 1, 4), t0.COMP_SCL_DIVN_CD) / COUNT(t0.CORP_NO) OVER(PARTITION BY SUBSTR(t0.STD_YM, 1, 4), t0.COMP_SCL_DIVN_CD), 4)
		  	END as OVERDEBT_RATIO
		FROM 
		  	(
		    SELECT 
		      	t.*, 
		      	CASE -- Dvision by zero 회피
		      		WHEN (t.DEBT / DECODE(t.CAPITAL, 0, 1, t.CAPITAL)) >= 2 THEN 1 ELSE 0 
		      	END as isOVERDEBT -- 부채비율이 200% 이상이면 1, 아니면 0으로 재코딩
		    FROM 
		      	DEBT_RATIO_TB t
		    WHERE 
		    	t.COMP_SCL_DIVN_CD in ('1', '2', '3')
		  	) t0 
		WHERE 
			CASE 
				WHEN '${isSangJang}' = 'Y' 
				THEN t0.BLIST_MRKT_DIVN_CD in ('1', '2')	-- 코스피(1), 코스닥(2)만 선택
				ELSE t0.SEAC_DIVN = 'K'	-- 상장기업이 아닐때는 K결산만 필터링
			END
		ORDER BY 
		  	CASE	
		  		WHEN '${isSangJang}' = 'Y' THEN t0.STD_YM ELSE SUBSTR(t0.STD_YM, 1, 4)
		  	END
		) t0
	) t00
ORDER BY
	t00.STD_YM;
	

-- 임시테이블 삭제
DROP TABLE IF EXISTS DEBT_RATIO_TB;

-- 결과 조회
SELECT * FROM RESULT_BIZ_OVERDEBTRATIO_BIZSIZE ORDER BY STD_YM;